/*
  Convert SVG book icons to PNGs and generate a JS map for React Native require().
*/
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

async function main() {
  const svgDir = path.join(process.cwd(), 'assets', 'bible_icons');
  const outDir = path.join(process.cwd(), 'assets', 'bible_icons_png');
  if (!fs.existsSync(svgDir)) {
    console.error('SVG source directory not found:', svgDir);
    process.exit(1);
  }
  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });

  const files = fs.readdirSync(svgDir).filter((f) => f.endsWith('.svg'));
  const entries = [];
  for (const file of files) {
    const name = file.replace(/\.svg$/i, '');
    const src = path.join(svgDir, file);
    const dst = path.join(outDir, `${name}.png`);
    try {
      await sharp(src)
        .png({ compressionLevel: 9 })
        .resize(512, 512, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
        .toFile(dst);
      entries.push(name);
      console.log('Converted', file, '->', `${name}.png`);
    } catch (e) {
      console.warn('Failed to convert', file, e.message);
    }
  }

  // Generate a JS map file exporting require() for each PNG
  const mapJs = [
    '// AUTO-GENERATED by scripts/svg-to-png.js',
    '/* eslint-disable */',
    'export const bookIconPngMap = {',
    ...entries.map((name) => `  '${name}': require('./${name}.png'),`),
    '};',
    '',
  ].join('\n');

  fs.writeFileSync(path.join(process.cwd(), 'assets', 'bible_icons_png', 'map.js'), mapJs, 'utf8');
  console.log(`\nâœ… Wrote ${entries.length} PNGs and map.js in assets/bible_icons_png`);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
